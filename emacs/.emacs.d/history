;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(org-agenda-search-history command-history counsel-unicode-char-history tmm--history swiper-history imenu--history-list input-method-history gud-gdb-history compile-history magit-read-file-hist magit-revision-history grep-files-history grep-regexp-history counsel-locate-history org-tags-history counsel-describe-symbol-history info-lookup-history counsel-git-grep-history coding-system-history read-flycheck-checker-history buffer-name-history yes-or-no-p-history org-read-date-history face-name-history minibuffer-history woman-topic-history evil-ex-history file-name-history org-refile-history read-expression-history extended-command-history ivy-history))
(setq org-agenda-search-history '("+try"))
(setq command-history '((evil-change 7 11 'exclusive nil nil) (evil-find-char-to nil 98) (evil-change 6 11 'inclusive nil nil) (evil-change 5 11 'inclusive nil nil) (evil-delete 1 24 'line nil nil) (evil-change 1 11 'line nil nil) (evil-change 4 11 'inclusive nil nil) (evil-change 4 11 'inclusive nil nil) (evil-replace 6 7 'exclusive 119) (evil-replace 8 9 'exclusive 119) (evil-replace 11 11 'exclusive 119) (evil-change 1 11 'line nil nil) (evil-change 1 11 'line nil nil) (evil-change 1 11 'line nil nil) (evil-change 1 11 'line nil nil) (evil-change 1 11 'line nil nil) (evil-change 1 11 'line nil nil) (evil-change 1 9 'line nil nil) (evil-change 1 11 'line nil nil) (evil-change 6 11 'exclusive nil nil) (evil-change 4 11 'inclusive nil nil) (evil-change 6 11 'inclusive nil nil) (evil-change 6 11 'inclusive nil nil) (evil-change 6 11 'inclusive nil nil) (evil-change 1 11 'line nil nil) (evil-delete-char 8 9 'exclusive nil) (execute-extended-command nil "evil-delete-char" #("evil dele
evil-surround-delete
evil-delete-char
evil-delete-whole-line
evil-delete
evil-delete-marks
evil-delete-backward-word
evil-delete-backward-char-and-join
evil-window-delete
evil-delete-buffer
evil-delete-line
evil-delete-backward-char
evil-ex-delete-backward-char" 9 10 (read-only nil) 10 14 (face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-2) read-only nil) 14 24 (face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-1) read-only nil) 24 27 (face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-3) read-only nil) 27 30 (face ((:foreground "#8ec07c") ivy-current-match) read-only nil) 30 31 (read-only nil) 31 35 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 35 36 (face ivy-minibuffer-match-face-1 read-only nil) 36 39 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 39 48 (read-only nil) 48 52 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 52 53 (face ivy-minibuffer-match-face-1 read-only nil) 53 56 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 56 71 (read-only nil) 71 75 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 75 76 (face ivy-minibuffer-match-face-1 read-only nil) 76 79 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 79 83 (read-only nil) 83 87 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 87 88 (face ivy-minibuffer-match-face-1 read-only nil) 88 91 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 91 101 (read-only nil) 101 105 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 105 106 (face ivy-minibuffer-match-face-1 read-only nil) 106 109 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 109 127 (read-only nil) 127 131 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 131 132 (face ivy-minibuffer-match-face-1 read-only nil) 132 135 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 135 162 (read-only nil) 162 166 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 166 174 (face ivy-minibuffer-match-face-1 read-only nil) 174 177 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 177 181 (read-only nil) 181 185 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 185 186 (face ivy-minibuffer-match-face-1 read-only nil) 186 189 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 189 200 (read-only nil) 200 204 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 204 205 (face ivy-minibuffer-match-face-1 read-only nil) 205 208 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 208 217 (read-only nil) 217 221 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 221 222 (face ivy-minibuffer-match-face-1 read-only nil) 222 225 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 225 243 (read-only nil) 243 247 (face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1) read-only nil) 247 251 (face ivy-minibuffer-match-face-1 read-only nil) 251 254 (face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1) read-only nil) 254 271 (read-only nil))) (evil-change 8 11 'inclusive nil nil) (evil-change 6 11 'exclusive nil nil) (evil-change 4 6 'inclusive nil nil) (evil-change 6 11 'exclusive nil nil) (evil-change 7 11 'inclusive nil nil) (evil-change 6 11 'inclusive nil nil) (evil-change 9 11 'inclusive nil nil) (evil-change 7 11 'inclusive nil nil) (evil-change 5 11 'exclusive nil nil) (evil-change 7 11 'exclusive nil nil) (evil-change 4 11 'inclusive nil nil) (evil-change 7 11 'exclusive nil nil) (evil-change 6 11 'exclusive nil nil) (evil-change 6 11 'exclusive nil nil) (evil-record-macro 106) (evil-change 1 11 'line nil nil) (evil-record-macro 113) (eval-buffer) (execute-extended-command nil "eval-buffer" #("eval buffer
checkdoc-eval-current-buffer
eval-buffer" 11 12 (read-only nil) 12 21 (read-only nil face ((:foreground "#8ec07c") ivy-current-match)) 21 25 (read-only nil face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-2)) 25 34 (read-only nil face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-1)) 34 39 (read-only nil face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-3)) 39 40 (read-only nil face ((:foreground "#8ec07c") ivy-current-match)) 40 41 (read-only nil) 41 45 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 45 46 (read-only nil face ivy-minibuffer-match-face-1) 46 51 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 51 52 (read-only nil))) (evil-find-char nil 115) (save-buffer 1) (execute-extended-command nil "save-buffer" #("save buffer
save-buffers-kill-terminal
org-save-all-org-buffers
save-some-buffers
abbrev-edit-save-buffer
erc-save-buffer-in-logs
save-buffers-kill-emacs
projectile-save-project-buffers
save-buffer
basic-save-buffer
sh-save-styles-to-buffer
ibuffer-mark-unsaved-buffers" 11 12 (read-only nil) 12 16 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 16 17 (read-only nil face ivy-minibuffer-match-face-1) 17 22 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 22 43 (read-only nil) 43 47 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 47 56 (read-only nil face ivy-minibuffer-match-face-1) 56 61 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 61 64 (read-only nil) 64 68 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 68 74 (read-only nil face ivy-minibuffer-match-face-1) 74 79 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 79 94 (read-only nil) 94 98 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 98 99 (read-only nil face ivy-minibuffer-match-face-1) 99 104 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 104 110 (read-only nil) 110 114 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 114 115 (read-only nil face ivy-minibuffer-match-face-1) 115 120 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 120 130 (read-only nil) 130 134 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 134 135 (read-only nil face ivy-minibuffer-match-face-1) 135 140 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 140 165 (read-only nil) 165 169 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 169 178 (read-only nil face ivy-minibuffer-match-face-1) 178 183 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 183 186 (read-only nil) 186 190 (read-only nil face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-2)) 190 191 (read-only nil face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-1)) 191 196 (read-only nil face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-3)) 196 197 (read-only nil face ((:foreground "#8ec07c") ivy-current-match)) 197 204 (read-only nil) 204 208 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 208 209 (read-only nil face ivy-minibuffer-match-face-1) 209 214 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 214 219 (read-only nil) 219 223 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 223 234 (read-only nil face ivy-minibuffer-match-face-1) 234 239 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 239 256 (read-only nil) 256 260 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 260 262 (read-only nil face ivy-minibuffer-match-face-1) 262 267 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 267 269 (read-only nil))) (evil-find-char nil 115) (save-buffer 1) (execute-extended-command nil "save-buffer" #("save buffer
save-buffers-kill-terminal
org-save-all-org-buffers
save-some-buffers
abbrev-edit-save-buffer
erc-save-buffer-in-logs
save-buffers-kill-emacs
projectile-save-project-buffers
save-buffer
basic-save-buffer
sh-save-styles-to-buffer
ibuffer-mark-unsaved-buffers" 11 12 (read-only nil) 12 16 (read-only nil face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-2)) 16 17 (read-only nil face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-1)) 17 22 (read-only nil face ((:foreground "#8ec07c") ivy-current-match ivy-minibuffer-match-face-3)) 22 38 (read-only nil face ((:foreground "#8ec07c") ivy-current-match)) 38 43 (read-only nil) 43 47 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 47 56 (read-only nil face ivy-minibuffer-match-face-1) 56 61 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 61 64 (read-only nil) 64 68 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 68 74 (read-only nil face ivy-minibuffer-match-face-1) 74 79 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 79 94 (read-only nil) 94 98 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 98 99 (read-only nil face ivy-minibuffer-match-face-1) 99 104 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 104 110 (read-only nil) 110 114 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 114 115 (read-only nil face ivy-minibuffer-match-face-1) 115 120 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 120 130 (read-only nil) 130 134 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 134 135 (read-only nil face ivy-minibuffer-match-face-1) 135 140 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 140 165 (read-only nil) 165 169 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 169 178 (read-only nil face ivy-minibuffer-match-face-1) 178 183 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 183 186 (read-only nil) 186 190 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 190 191 (read-only nil face ivy-minibuffer-match-face-1) 191 196 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 196 204 (read-only nil) 204 208 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 208 209 (read-only nil face ivy-minibuffer-match-face-1) 209 214 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 214 219 (read-only nil) 219 223 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 223 234 (read-only nil face ivy-minibuffer-match-face-1) 234 239 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 239 256 (read-only nil) 256 260 (read-only nil face (ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-1)) 260 262 (read-only nil face ivy-minibuffer-match-face-1) 262 267 (read-only nil face (ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-1)) 267 269 (read-only nil))) (evil-change 3759 3760 'line nil nil) (evil-find-char nil 115) (evil-find-char nil 115) (evil-find-char nil 115) (evil-find-char nil 115) (evil-delete 3342 3380 'line nil nil) (evil-yank 3759 3759 'exclusive nil nil) (evil-record-macro 113) (evil-record-macro 113) (evil-record-macro 106) (evil-record-macro 113) (evil-delete 4256 4290 'line nil nil) (evil-delete 3760 3783 'line nil nil) (evil-change 3794 3798 'inclusive nil nil) (evil-change 3823 3827 'exclusive nil nil) (evil-change 3820 3827 'inclusive nil nil) (evil-change 3794 3805 'exclusive nil nil) (evil-change 3783 3803 'line nil nil) (evil-delete 3332 3355 'line nil nil) (evil-change 3403 3443 'line nil nil) (evil-delete 3403 3443 'line nil nil) (evil-delete 3403 3459 'line nil nil) (evil-change 3406 3461 'exclusive nil nil) (evil-change 4 11 'inclusive nil nil) (evil-change 4 11 'inclusive nil nil) (evil-change 1 11 'line nil nil) (evil-change 1 11 'line nil nil) (evil-change 3403 3459 'line nil nil) (evil-change 3806 3809 'exclusive nil nil) (evil-change 3802 3821 'exclusive nil nil) (evil-find-char-to nil 98) (evil-find-char-to nil 98) (evil-change 3799 3819 'line nil nil) (evil-delete 4301 4304 'line nil nil) (evil-change 3342 3363 'line nil nil) (evil-delete 3332 3355 'line nil nil) (evil-delete 3365 3386 'line nil nil) (evil-change 1 9 'line nil nil) (evil-record-macro 60) (evil-find-char nil 98) (evil-change 1 11 'line nil nil) (evil-change 1 11 'line nil nil) (evil-delete 3720 3743 'line nil nil) (evil-change 3383 3391 'inclusive nil nil) (evil-delete 3380 3436 'line nil nil) (evil-change 3384 3387 'inclusive nil nil) (evil-change 3380 3436 'line nil nil) (evil-delete 3342 3398 'line nil nil) (evil-delete 3342 3380 'line nil nil)))
(setq tmm--history '("h==>Help" "p==>Python" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File" "h==>Help" "p==>Python" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File" "h==>Help" "p==>Python" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File" "h==>Help" "p==>Python" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq swiper-history '(#("page" 0 4 (ivy-index 8))))
(setq gud-gdb-history '("gdb -i=mi "))
(setq magit-revision-history '(#("mast" 0 4 (ivy-index 0)) "muzzle_events_query" "master" #("pro" 0 3 (ivy-index 3)) "master" "tempoc-configmap-defaults" "master" "threaded-image-fetching" #("d" 0 1 (ivy-index 1)) "docker-compose" #("docker_compose" 0 14 (ivy-index 0)) "devel" "datadog-metrics" "master" "datadog-metrics" "jira-datadog" "datadog-metrics" "threaded-image-fetching" #("ma" 0 2 (ivy-index 0)) #("jir" 0 3 (ivy-index 0)) "threaded-image-fetching" "jira-datadog" "master" #("as" 0 2 (ivy-index 0)) #("datadog" 0 7 (ivy-index 0)) "master" #("datadog-metrics" 0 15 (ivy-index 0)) #("master" 0 6 (ivy-index 0)) "tempoc-python" "tempoc-master" "create-with-kops" #("cluster-admin-missing-secrets-msg" 0 33 (ivy-index 0)) #("mas" 0 3 (ivy-index 0)) "muzzle"))
(setq grep-regexp-history '("return_code"))
(setq org-tags-history '(#("q" 0 1 (ivy-index 0))))
(setq counsel-git-grep-history '(#("gener" 0 5 (ivy-index 0)) #("general" 0 7 (ivy-index 0)) #("gen" 0 3 (ivy-index 18)) #("buffer" 0 6 (ivy-index 5)) #("gener c" 0 7 (ivy-index 0)) #("avy" 0 3 (ivy-index 5)) #("keys" 0 4 (ivy-index 0)) #("leader" 0 6 (ivy-index 1)) #("org key" 0 7 (ivy-index 1)) #("app ke" 0 6 (ivy-index 0)) #("evil-leader" 0 11 (ivy-index 0)) #("gener/" 0 6 (ivy-index 0)) #("evil" 0 4 (ivy-index 24)) #("edit" 0 4 (ivy-index 0)) #("emacs" 0 5 (ivy-index 2)) #("editor" 0 6 (ivy-index 0)) #("resource_creation_hooks" 0 23 (ivy-index 0)) #("try" 0 3 (ivy-index 0)) #("evil org" 0 8 (ivy-index 8)) #("use-pac org" 0 11 (ivy-index 3)) #("@*" 0 2 (ivy-index 141)) #("resource_container_scheduling" 0 29 (ivy-index 1)) #("CONDUCTOR_CONFIG_SCHEMA" 0 23 (ivy-index 0)) #("repl" 0 4 (ivy-index 0)) #("liveness" 0 8 (ivy-index 2)) #("livenes" 0 7 (ivy-index 1)) #("readiness" 0 9 (ivy-index 0)) #("readiness_probe" 0 15 (ivy-index 0)) #("core" 0 4 (ivy-index 0)) #("read" 0 4 (ivy-index 0)) #("live" 0 4 (ivy-index 0)) #("pdb" 0 3 (ivy-index 0)) #("prob" 0 4 (ivy-index 0)) #("exi" 0 3 (ivy-index 0)) #("Manager" 0 7 (ivy-index 1)) #("Pro" 0 3 (ivy-index 1)) #("provide manager" 0 15 (ivy-index 0)) #("provide_" 0 8 (ivy-index 0)) #("initialD" 0 8 (ivy-index 1)) #("readinessprobe" 0 14 (ivy-index 2)) #("httpGet" 0 7 (ivy-index 0)) #("pods" 0 4 (ivy-index 0)) #("Probe" 0 5 (ivy-index 0)) #("Prob" 0 4 (ivy-index 0)) #("probe" 0 5 (ivy-index 0)) #("fluent" 0 6 (ivy-index 1)) #("except:" 0 7 (ivy-index 0)) #("resour" 0 6 (ivy-index 0)) #("provisions" 0 10 (ivy-index 0)) #("provisi" 0 7 (ivy-index 1)) #("cache" 0 5 (ivy-index 0)) #("configerr" 0 9 (ivy-index 0)) #("schedule contain" 0 16 (ivy-index 2)) #("W." 0 2 (ivy-index 7)) #("fluen" 0 5 (ivy-index 0)) #("node-test" 0 9 (ivy-index 0)) #("datadog.init" 0 12 (ivy-index 1)) #("ring" 0 4 (ivy-index 0)) #("node-te" 0 7 (ivy-index 1)) #("volumeMount" 0 11 (ivy-index 5)) #("Start" 0 5 (ivy-index 3)) #("log_collec" 0 10 (ivy-index 0)) #("sidecar" 0 7 (ivy-index 2)) #("deployment" 0 10 (ivy-index 37)) #("POD_NAME" 0 8 (ivy-index 1)) #("volumeMou" 0 9 (ivy-index 2)) #("POD_N" 0 5 (ivy-index 0)) #("emptyDir" 0 8 (ivy-index 2)) #("volume" 0 6 (ivy-index 0)) #("command" 0 7 (ivy-index 0)) #("pod_name" 0 8 (ivy-index 0)) #("log-coll" 0 8 (ivy-index 0)) #("parse" 0 5 (ivy-index 0)) #("errors = " 0 9 (ivy-index 0)) #("print" 0 5 (ivy-index 7)) #("coll" 0 4 (ivy-index 0)) #("DD_API_KEY" 0 10 (ivy-index 4)) #("container spec" 0 14 (ivy-index 9)) #("bashrc" 0 6 (ivy-index 0)) #("Im" 0 2 (ivy-index 0)) #("mini" 0 4 (ivy-index 0)) #("deplo" 0 5 (ivy-index 3)) #("job" 0 3 (ivy-index 196)) #("rename" 0 6 (ivy-index 1)) #("provides" 0 8 (ivy-index 1)) #("private" 0 7 (ivy-index 0)) #("help docker" 0 11 (ivy-index 0)) #("get_in" 0 6 (ivy-index 0)) #("logger" 0 6 (ivy-index 1)) #("start" 0 5 (ivy-index 0)) #("emit" 0 4 (ivy-index 5)) #("stats" 0 5 (ivy-index 0)) #("initialize" 0 10 (ivy-index 3)) #("emit_data" 0 9 (ivy-index 1)) #("install" 0 7 (ivy-index 9)) #("datadog" 0 7 (ivy-index 9)) #("replicajk" 0 9 (ivy-index 0)) #("kube_conf" 0 9 (ivy-index 1)) #("configMap" 0 9 (ivy-index 0))))
(setq read-flycheck-checker-history '("python-flake8" "python-pylint" "python-pycompile" "python-flake8" #("fl" 0 2 (ivy-index 0)) #("flake" 0 5 (ivy-index 0)) "python-pylint" "python-flake8" "python-pylint" #("pylint" 0 6 (ivy-index 0)) #("flake8" 0 6 (ivy-index 0)) #("flak" 0 4 (ivy-index 0)) "python-pylint" "python-flake8" "python-pylint" #("fla" 0 3 (ivy-index 0)) "puppet-parser" "python-pylint" "lua-luacheck" #("lua" 0 3 (ivy-index 1)) #("pyli" 0 4 (ivy-index 0)) "python-flake8" "python-pylint" "haskell-hlint" "haskell-ghc" "python-pylint"))
(setq buffer-name-history '("*shell*" "local_dispatcher.py" "init.el" "*Customize Face: Warning*"))
(setq yes-or-no-p-history '("no" "yes" "no" "yes" "ys" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "y" "yes" "no"))
(setq org-read-date-history '("   " "1    " "9    " "14    " "1    " "      " "27    " "mon    " "   " "r    " "   " "            " "   " "22:30    " "   " "    " "22:30    " "10:00    " "   " "wed    " "   " "23:30    " "23:00    " "23:30    " "21:00    " "22:00    " "10:00    " "23:00    " "   " "               " "   " "13    " "thurs    " "   " "11:00    " "   " "    " "6    " "   " "fri    " "   " "    " "19:30    " "   " "21:30    " "19:30    " "  20:30    " "   " "tue    " "wed    " "   " "sat    " "sa    " "   " "         " "   " "         " "   " "                  " "13    " "   " "10    " "   " "10    "))
(setq face-name-history '(#("defaul" 0 6 (ivy-index 1)) #("defa" 0 4 (ivy-index 1)) "all faces"))
(setq minibuffer-history '("whole-line" "whole line" "cc" "change" "last-macro" "ce" "last-macro" "/bin/zsh" "/bin/zshj" "/bin/zsh" "ftzm" "matt" "V1k1ngr!" "fluentd-sidecar-to-daemonset" "muzzle_events_query" "conductor" "tempoc-configmap-defaults" "ftzm" "10" "20" "10" "ftzm" "docker_compose" "/bin/zsh" "ftzm" "V1k1ngr!" "/bin/zsh" "On jira-datadog: " "threaded-image-fetching" "datadog-metrics" "jira-datadog" "ftzm" "matt" "ftzm" "devel" "ftzm" "arni" "pre-mortem" "begin-module" "doit" "take that" "try again" "oi" "trying all the time" "dis" "dick" "try" "oioi" "try" "di" "test meeting" "test" "tempoc-master" "seq" "let-alist" "50" "-50" "-60" "60" "10" "jump" "last-macro" "kub" "kuber" "kub" "minikube" "cluster-admin-missing-secrets-msg" "org" "tempo" "org" "emacs" "org" "jira" "muzzle" "emacs" "org" "dots" "org" "emacs" "dots" "org" "tempo" "last-macro" "t" "dis" "tempo" "org" "emacs" "8000" "tempo" "org" "emacs" "KEYPAIR" "honcho" "KEYPAIR" "KEYPAIR_NAME" "KEYPAIR" "tempo" "org" "/bin/zsh"))
(setq evil-ex-history '(#("w" 0 1 (ex-index 1)) #("%s/-keys//g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("q" 0 1 (ex-index 1)) "w" "wq" "w" #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 181)) #("'<,'>s/container/container_spec/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32)) #("'<,'>s/container/container_specs/" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33)) #("150" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("'<,'>s/readiness/liveness/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27)) #("%s/EmptyDir/LivenessProbe" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25)) #("20" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("28" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("37" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("121" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("105" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("34" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("85" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("119" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("128" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("239" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("93" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("83" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("121" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("208" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("58" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("'<,'>s/var\\/log/var\\/hostlog" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("276" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("266" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("246" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("242" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("247" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("253" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("242" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("62" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("115" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("67" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("38" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("78" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("'<,'>s/main_container/container_spec/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37) 37 38 (ex-index 38)) #("'<,'>s/containers/container_specs/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35)) #("87" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("65" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("302" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("'<,'>s/vars/env_\\0/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20)) #("559" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("'<,'>s/kube_secret/kube_env/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29)) #("'<,'>s/secrets/vars/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21)) #("272" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("22" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("252" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("67" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("676" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("42" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("76" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("24" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("54" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("92" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("'<,'>s/config/secrets/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23)) #("184" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("139" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("138" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("193" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("'<,'>s/self.errors/errors/g" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27)) #("119" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("191" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("219" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("129" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("112" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("109" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3))))
(setq file-name-history '(#("/home/matt/.emacs.d/" 0 20 (ivy-index 0)) #("/home/matt/.dots/emacs/.emacs.d/elpa/evil-20170306.334/" 0 55 (ivy-index 0)) #("/home/matt/.dots/emacs/.emacs.d/elpa/evil-20170306.334/evil-maps.el" 0 67 (ivy-index 22)) #("/home/matt/.dots/emacs/.emacs.d/elpa/evil-20170306.334/evil-commands.el" 0 71 (ivy-index 6)) #("/home/matt/.dots/emacs/.emacs.d/elpa/evil-20170306.334/evil-states.el" 0 69 (ivy-index 26)) #("/home/matt/.emacs.d/init.el" 0 27 (ivy-index 0)) #("/home/matt/work_urls.org" 0 24 (ivy-index 0)) #("/home/matt/atreus_layout" 0 24 (ivy-index 0)) #("/home/matt/bin/emacs_start.sh" 0 29 (ivy-index 0)) #("/home/matt/.zshrc" 0 17 (ivy-index 5)) "/home/matt/file" "/home/matt/.zprofile" "/home/matt/.xinitrc" "/home/matt/test" #("/home/matt/booze_email.org" 0 26 (ivy-index 0)) "/home/matt/.xinitrc" "/home/matt/test" #("/home/matt/dev/conductor+tempo/tempo_conductor/descriptors/temposoftware-belinda:master-2017.05.08-23.31.21-b91a442e279f9788f176b7f05ee892666a9d8377" 0 148 (ivy-index 0)) "/home/matt/dev/conductor+tempo/tempo_conductor/descriptors/temposoftware-jira:master-2017.05.05-03.17.38-6fa9576cb1fb5bdcd57167f92c0d13675c438e25" "/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/liveness_probe.py~" "/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/probe.py" "/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/liveness_probe.py" #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/probe.py
liveness_probe.py" 0 95 (ivy-index 0)) #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/liveness_probe.py" 0 86 (ivy-index 11)) "/home/matt/.xmonad/xmonad.hs" #("/home/matt/dev/tempo/tempo_yamls/core-deployment.yaml" 0 53 (ivy-index 2)) #("/home/matt/dev/conductor+tempo/tempo_conductor/descriptors/temposoftware-jira:master-2017.05.05-03.17.38-6fa9576cb1fb5bdcd57167f92c0d13675c438e25" 0 145 (ivy-index 0)) #("/home/matt/dev/tempo/tempo_yamls/jira-deployment.yaml" 0 53 (ivy-index 4)) #("/home/matt/dev/conductor+tempo/tempo_conductor/local_world.yaml" 0 63 (ivy-index 7)) #("/home/matt/dev/tempo/dolly/queue_io.org" 0 39 (ivy-index 19)) #("/home/matt/dev/conductor+tempo/tempo_conductor/descriptors/" 0 59 (ivy-index 2)) #("/home/matt/dev/conductor+tempo/tempo_conductor/managers/tempo_conf.py" 0 69 (ivy-index 6)) #("/home/matt/dev/conductor+tempo/tempo_conductor/managers/local_dispatcher.py" 0 75 (ivy-index 5)) #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/varfile.py" 0 79 (ivy-index 10)) #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/sidecars.py" 0 80 (ivy-index 9)) #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/local_service.py" 0 85 (ivy-index 8)) #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/inline_vars.py" 0 83 (ivy-index 7)) #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/env_var_localenv.py" 0 88 (ivy-index 6)) #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/empty_logging.py" 0 85 (ivy-index 5)) #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/empty_dir.py" 0 81 (ivy-index 0)) #("/home/matt/dev/tempo/tempo_yamls/" 0 33 (ivy-index 0)) #("/home/matt/dev/conductor+tempo/conductor/conductor/managers/resource/sidecar.py" 0 79 (ivy-index 0)) #("/home/matt/dev/conductor+tempo/conductor/" 0 41 (ivy-index 2)) #("/home/matt/.xmonad/xmonad.hs" 0 28 (ivy-index 0)) "/home/matt/.xinitrc" "/home/matt/test" #("/home/matt/that" 0 15 (face ivy-virtual)) "/home/matt/tht" "/home/matt/this" "/home/matt/bin/clever_emacs_start" "/home/matt/that" "/home/matt/this" "/home/matt/bin/open_emacs.sh" "/home/matt/this" "/home/matt/test" "/home/matt/this" "/home/matt/.xinitrc" "/home/matt/bin/emacsframe.sh" "/home/matt/test" "/home/matt/.xinitrc" "/home/matt/.startx" "/home/matt/test" #("/home/matt/dev/tempo/techniques.org" 0 35 (ivy-index 0)) #("/home/matt/dev/tempo/tempo_yamls/fluentd-daemonset.yaml" 0 55 (ivy-index 0)) #("/home/matt/td-agent.conf" 0 24 (ivy-index 0)) "/tmp/kubectl-edit-33ols.yaml" "/tmp/kubectl-edit-33ols.yaml" "/home/matt/test4" "/home/matt/test3" "/home/matt/test2" "/home/matt/test" "/home/matt/test2" "/home/matt/test" #("/home/matt/dev/tempo/jira-service/jira_service/core/apps.py" 0 59 (ivy-index 0)) #("/home/matt/org/main.org" 0 23 (ivy-index 7)) #("/home/matt/org/" 0 15 (ivy-index 0)) #("/home/matt/immigration.org" 0 26 (ivy-index 1)) #("/home/matt/dev/tempo/jira-service/Dockerfile" 0 44 (ivy-index 0)) #("/home/matt/queue_io.org" 0 23 (ivy-index 1)) #("/home/matt/tempo_yamls/jira-deployment.yaml" 0 43 (ivy-index 4)) #("/home/matt/techniques.org" 0 25 (ivy-index 35)) #("/home/matt/org/refile.org" 0 25 (ivy-index 12)) #("/home/matt/org/work.org" 0 23 (ivy-index 16)) #("/home/matt/ikealist" 0 19 (ivy-index 0)) #("/home/matt/techniques" 0 21 (ivy-index 0)) #("/home/matt/org/communication_plan.org" 0 37 (ivy-index 0)) #("/home/matt/dev/tempo/jira-service/jira_service/lifecycle/" 0 57 (ivy-index 0)) #("/home/matt/stina_arrival.org" 0 28 (ivy-index 29)) #("/home/matt/dev/conductor+tempo/tempo_conductor/.gitignore" 0 57 (ivy-index 2)) #("/home/matt/tempo_yamls/public-dispatcher-deployment.yaml" 0 56 (ivy-index 0)) #("/home/matt/dev/conductor+tempo/tempo_conductor/managers/dashboar_var_constructor.py" 0 83 (ivy-index 0)) #("/home/matt/dev/tempo/dashboar/" 0 30 (ivy-index 0)) #("/home/matt/dev/tempo/belinda/belinda/" 0 37 (ivy-index 2)) #("/home/matt/dev/tempo/belinda/" 0 29 (ivy-index 0)) #("/home/matt/immigration" 0 22 (ivy-index 0)) #("/home/matt/immigration_todo" 0 27 (ivy-index 0)) #("/home/matt/cond-test-secrets/configmaps/hipchat" 0 47 (ivy-index 9)) #("/home/matt/cond-test-secrets/configmaps/jira" 0 44 (ivy-index 12)) #("/home/matt/cond-test-secrets/configmaps/base-env" 0 48 (ivy-index 2)) #("/home/matt/dev/conductor+tempo/tempo_conductor/tempo-defaults.yaml" 0 66 (ivy-index 0))))
(setq org-refile-history '("work.org" #("main.org/Linux" 9 14 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "main" fontified nil)) #("main.org/General" 9 16 (fontified t org-category "main" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) face org-level-1)) "main.org/General/" #("main.org/General" 9 16 (fontified t org-category "main" face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) "main.org/General/" #("main.org/General" 9 16 (fontified t org-category "main" face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) #("work.org/Tasks" 9 14 (fontified nil org-category "work" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) #("main.org/General" 9 16 (fontified t org-category "main" face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) #("work.org/Tasks" 9 14 (fontified nil org-category "work" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) #("tasks.org/Linux" 10 15 (face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified t)) #("tasks.org/General" 10 17 (face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified t)) #("work.org/Tasks" 9 14 (fontified nil org-category "work" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) #("tasks.org/General" 10 17 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified nil)) #("tasks.org/Videotron" 10 15 (fontified t line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks" face org-level-1) 15 19 (fontified t line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks" face org-level-1)) #("tasks.org/Apartment Notes" 10 25 (fontified t line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks" face org-level-1)) #("tasks.org/Wedding" 10 17 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified nil)) #("tasks.org/Linux" 10 15 (face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified t)) #("tasks.org/Life" 10 14 (face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified t)) "work.org" #("tasks.org/Emacs" 10 15 (face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified t)) #("tasks.org/Linux" 10 15 (fontified nil)) #("tasks.org/Emacs" 10 15 (fontified nil)) #("tasks.org/Life" 10 14 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified nil)) #("tasks.org/Emacs" 10 15 (fontified t line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks" face org-level-1)) #("tasks.org/Emacs/Org" 10 15 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified nil) 16 19 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("*" 0 1 (face org-hide)) org-category "tasks" fontified nil)) #("tasks.org/Life" 10 14 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks")) #("tasks.org/Emacs" 10 15 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks")) #("tasks.org/Wedding" 10 17 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks")) #("tasks.org/Life" 10 14 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks")) #("work.org/tasks" 9 14 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "work")) "work.org" #("tasks.org/Life" 10 14 (fontified nil org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) "work.org" #("tasks.org/Linux" 10 15 (fontified nil org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) face org-level-1)) #("work.org/tasks" 9 14 (fontified t org-category "work" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) face org-level-1)) "work.org" #("tasks.org/Emacs" 10 15 (fontified t org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) face org-level-1)) #("tasks.org/Life" 10 14 (fontified t org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) face org-level-1)) #("tasks.org/Emacs" 10 15 (fontified t org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) face org-level-1)) #("tasks.org/Linux" 10 15 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified nil)) #("tasks.org/Emacs" 10 15 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified nil)) #("tasks.org/Life" 10 14 (fontified nil org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) "work.org" #("tasks.org/Life" 10 14 (fontified nil org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) #("tasks.org/Emacs" 10 15 (fontified nil org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) "tasks.org/Emacs/" #("tasks.org/Emacs" 10 15 (fontified nil org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) #("work.org/tasks" 9 14 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "work")) #("tasks.org/Linux" 10 15 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified nil)) #("tasks.org/Emacs" 10 15 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified nil)) "work.org" #("tasks.org/Emacs" 10 15 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks")) #("tasks.org/Linux" 10 15 (fontified t line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks" face org-level-1)) #("tasks.org/Emacs" 10 15 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks")) #("work.org/tasks" 9 14 (fontified nil org-category "work" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)))) #("tasks.org/Emacs" 10 15 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks")) #("tasks.org/Linux" 10 15 (fontified t line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks" face org-level-1)) #("tasks.org/Life" 10 14 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks")) #("tasks.org/Emacs" 10 15 (fontified t face org-level-1 line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) org-category "tasks")) #("work.org/tasks" 9 14 (fontified nil)) #("tasks.org/Linux" 10 15 (fontified t org-category "tasks" line-prefix nil wrap-prefix #("  " 0 2 (face org-indent)) face org-level-1)) #("work.org/tasks" 9 14 (face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "work" fontified t)) #("tasks.org/Emacs" 10 15 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "tasks" fontified nil)) "tasks.org/Emacs/" "tasks.org/Emacs" "work.org/Work/tasks" "tasks.org/Emacs" "work.org/Work/tasks" "work.org/Work/tasks/" "work.org/Work/tasks" "work.org/Work/tasks/" "work.org/Work/tasks" "tasks.org/Work" "tasks.org/Emacs" "tasks.org/Correspondence" "tasks.org/Emacs" "tasks.org/General" "tasks.org/Packing" "tasks.org/Emacs" "tasks.org/General" "tasks.org/Emacs/Python" "tasks.org/Emacs"))
(setq read-expression-history '("(counsel-projectile-find-file test)" "(define-key ivy-minibuffer-map (kbd \"<escape>\") 'minibuffer-keyboard-quit)" "(global-set-key (kbd \"<escape>\") 'keyboard-quit)" "(setq powerline-default-separator 'slant)" "(setq default-text-scale-amount 10)" "(setq default-text-scale-amount 60)" "(setq evil-snipe-scope 'visible)" "(setq evil-snipe-scope 'buffer)" "(replace-regexp-in-string \" \" \"-\" \"da foo is foobared\")" "(replace-regexp-in-string \"fo+\" \"baz\" \"da foo is foobared\")" "(find-file (capture-meeting-file \"~/org/meetings\"))" "(find-file \"~/org/meetings/yermum\")" "(find-file \"~/org/meeting/yermum\")" "(setq line-move-visual t)" "(set-face-background 'fringe \"red\")" "(set-window-fringes nil 0 0)
" "evil-set-jump" "(setq org-agenda-custom-commands '((\"w\" \"List work tasks\" tags-todo \"work\") ))" "(setq org-agenda-custom-commands '((\"w\" \"List work tasks\" agenda \"work\") ))" "(setq org-agenda-custom-commands '((\"w\" \"List work tasks\" tags \"work\") ))" "(org-agenda-filter-by-tag \"work\")" "(setq projectile-completion-system 'ivy)" "(setq projectile-enable-caching nil)" "(counsel-projectile-ag \"test\")" "(counsel-projectile-ag 'test')" "(setq flycheck-python-pylint-executable '/home/mfitzsimmons/dolly/venv/bin/pylint')" "(setq powerline-default-separator 'slant)" "(setq powerline-default-separator 'wave)" "(setq powerline-default-separator 'slant)" "(setq powerline-default-separator 'angle)" "(setq truncate-lines 1)" "truncate-lines" "(setq neo-window-width 38)" "(setq neo-window-width 48)" "(setq neo-theme 'icons)" "(setq tool-bar-mode 1)" "tool-bar-mode" "(setq flycheck-python-pylint-executable \"/home/matt/dolly/venv/bin/pylint\")" "(setq flycheck-python-pylint-executable /home/matt/dolly/venv/bin/pylint)" "(setq flycheck-python-pylint-executable \"/home/matt/dolly/venv/bin/pylint\")" "(setq neo-window-fixed-size nil)" " (setq powerline-default-separator 'slant)" "()" "(write-region \"deees\" nil \"/home/matt/test\" 'append)" "(write-region \"deees\" nil /home/matt/test 'append)" "(format-time-string \"%D\" (time-subtract (current-time) (seconds-to-time (* 3 86400))))" "(format-time-string \"%D\" (time-subtract (current-time) (seconds-to-time 86400)))" "(format-time-string \"%D\" (time-subtract (current-time) (seconds-to-time 86400))" "(time-subtract (current-time) (seconds-to-time 86400))" "(format-time-string '%Y' (current-time))" "(format-time-string '%Y' (seconds-to-time 86400))" "(seconds-to-time 86400)" "(time-string (current-time))" "(time-subtract (current-time) ())" "(/ (time-to-seconds (time-subtract (current-time) (org-read-date nil t \"<2017-03-10>\" nil))) 86400)" "(/ (time-to-seconds (time-subtract (current-time) (org-read-date nil t \"<2015-11-06>\" nil))) 86400)" "(/ (time-to-seconds (time-subtract (current-time) (org-read-date nil t \"<2015-11-06>\" nil))) 4)" "(time-to-seconds (time-subtract (current-time) (org-read-date nil t \"<2015-11-06>\" nil)))" "(time-subtract (current-time) (org-read-date nil t \"<2015-11-06>\" nil))" "(time-to-days (time-subtract (current-time) (org-read-date nil t \"<2015-11-06>\" nil)))" "(time-to-days (time-subtract (current-time) (org-read-date nil t \"<2015-11-06>\" nil))" "(time-to-days ((time-subtract (current-time) (org-read-date nil t \"<2015-11-06>\" nil))))" "(time-to-days ((time-subtract (current-time) (org-read-date nil t \"<2015-11-06>\" nil)))" "(time-subtract (current-time) (org-read-date nil t \"<2015-11-06>\" nil))" "(time-since (org-read-date nil t \"<2015-11-06>\" nil))" "(time-since '(22077 11748))" "(time-since '((org-read-date nil t \"<2015-11-06>\" nil)))" "(time-since '(org-read-date nil t \"<2015-11-06>\" nil))" "(date-leap-year-p '(22077 11748))" "(org-read-date nil t \"<2015-11-06>\" nil)" "(date-leap-year-p '(org-read-date nil t \"<2015-11-06>\" nil))" "(date-leap-year-p (org-read-date nil t \"<2015-11-06>\" nil))" "(date-leap-year-p ((org-read-date nil t \"<2015-11-06>\" nil)))" "(org-read-date nil t \"<2015-11-06>\" nil)" "(setq visible-cursor nil)" "(blink-cursor-mode -1)" "(define-key evil-normal-state-map (kbd \"TAB\") 'org-cycle)" "(blink-cursor-mode 0)" "()" "(global-set-key [f10] [?m ?u ?O escape ?g ?t ?m ?u ])" "(global-set-key [f10] [?m ?u ?O escape ?`` ?u ])" "(setq evil-want-fine-undo t)" "(let ((oldpos (point)))
    (end-of-line)
    (newline-and-indent))" "(open-line 1)" "(global-set-key [f10] [?m ?u ?O escape ?`` ?u ])" "(evil-goto-mark ?^)" "(evil-goto-mark \"?\")" "(evil-goto-mark ?^ nil)" "(evil-goto-mark ?^ t)" "(evil-goto-mark ?^)" "(evil-goto-mark ?^ noerror)" "(evil-goto-mark ?^)" "(evil-set-marker ?^ nil t)" "(global-set-key [f10] [?m ?u ?O escape ?\\` ?u])" "(global-set-key [f10] [?m ?u ?O escape ?` ?u])" "(global-set-key [f10] [?m ?u ?O escape ?\\` ?u ])" "(global-set-key [f10] [?m ?u ?O escape ?` ?u ])" "(global-set-key [f10] [?d ?d])" "(setq flycheck-display-errors-delay 0.1)" "(setq evil-mode-cursor-back t)"))
(setq extended-command-history '(#("evil dele" 0 9 (ivy-index 1)) #("eval buffer" 0 11 (ivy-index 1)) #("save buffer" 0 11 (ivy-index 7)) "init.el" #("^" 0 1 (ivy-index 1)) #("^sa" 0 3 (ivy-index 0)) #("^ivy b" 0 6 (ivy-index 1)) #("buffer" 0 6 (ivy-index 20)) #("^undo tree" 0 10 (ivy-index 3)) #("^pack ref" 0 9 (ivy-index 0)) #("pa" 0 2 (ivy-index 0)) #("^ag" 0 3 (ivy-index 0)) #("^elma" 0 5 (ivy-index 1)) #("^elm" 0 4 (ivy-index 1)) #("insert mac" 0 10 (ivy-index 0)) #("macro" 0 5 (ivy-index 5)) #("insert macro" 0 12 (ivy-index 0)) #("^find li" 0 8 (ivy-index 0)) #("^kmacro bind" 0 12 (ivy-index 0)) #("^evil-c" 0 7 (ivy-index 0)) #("^kma edi" 0 8 (ivy-index 0)) #("org heading" 0 11 (ivy-index 6)) #("^org heading" 0 12 (ivy-index 3)) #("^org head" 0 9 (ivy-index 0)) #("save or" 0 7 (ivy-index 0)) #("compile" 0 7 (ivy-index 0)) #("theme" 0 5 (ivy-index 0)) #("^counsel pro ag" 0 15 (ivy-index 0)) #("^counsel ag" 0 11 (ivy-index 1)) #("^org sear" 0 9 (ivy-index 0)) #("^counsel pro" 0 12 (ivy-index 1)) #("^coun pro" 0 9 (ivy-index 0)) #("^term" 0 5 (ivy-index 0)) #("^org save" 0 9 (ivy-index 0)) #("^oliv" 0 5 (ivy-index 1)) #("^oli" 0 4 (ivy-index 0)) #("rotate" 0 6 (ivy-index 4)) #("^spa" 0 4 (ivy-index 0)) #("^sp" 0 3 (ivy-index 0)) #("^ren" 0 4 (ivy-index 0)) #("^rename" 0 7 (ivy-index 0)) #("^ana" 0 4 (ivy-index 1)) #("^eyebrowse" 0 10 (ivy-index 1)) #("^yaml" 0 5 (ivy-index 0)) #("^shell" 0 6 (ivy-index 0)) #("^ shell" 0 7 (ivy-index 0)) #("^comint" 0 7 (ivy-index 43)) #("^shel" 0 5 (ivy-index 0)) #("history" 0 7 (ivy-index 1)) #("^org sa" 0 7 (ivy-index 0)) #("^org rel" 0 8 (ivy-index 0)) #("^org " 0 5 (ivy-index 2)) #("^l" 0 2 (ivy-index 0)) #("^spac" 0 5 (ivy-index 0)) #("^pack " 0 6 (ivy-index 4)) #("^pac in" 0 7 (ivy-index 0)) #("^pac" 0 4 (ivy-index 1)) #("^org undo" 0 9 (ivy-index 0)) #("^org-show-" 0 10 (ivy-index 1)) #("^org show todo" 0 14 (ivy-index 0)) #("^re" 0 3 (ivy-index 0)) #("^recover" 0 8 (ivy-index 0)) #("^python" 0 7 (ivy-index 2)) #("^calenda" 0 8 (ivy-index 1)) #("^calen" 0 6 (ivy-index 2)) #("evil gogg" 0 9 (ivy-index 0)) #("^pa i" 0 5 (ivy-index 0)) #("^ " 0 2 (ivy-index 1)) #("packa " 0 6 (ivy-index 2)) #("sav org" 0 7 (ivy-index 0)) #("creat dir" 0 9 (ivy-index 0)) #("^org mode" 0 9 (ivy-index 2)) #("^flycheck" 0 9 (ivy-index 0)) #("incre" 0 5 (ivy-index 1)) #("font" 0 4 (ivy-index 0)) #("^fly" 0 4 (ivy-index 0)) #("^p" 0 2 (ivy-index 0)) #("venv" 0 4 (ivy-index 5)) #("script" 0 6 (ivy-index 0)) #("^recov" 0 6 (ivy-index 0)) #("archive" 0 7 (ivy-index 0)) #("^ma" 0 3 (ivy-index 0)) #("^mark previ mo" 0 14 (ivy-index 0)) #("^mark pre" 0 9 (ivy-index 0)) #("^markdo" 0 7 (ivy-index 2)) #("^ansi " 0 6 (ivy-index 0)) #("^bal" 0 4 (ivy-index 0)) #("^auto" 0 5 (ivy-index 0)) #("^ter" 0 4 (ivy-index 0)) #("unicode" 0 7 (ivy-index 0)) #("^reco" 0 5 (ivy-index 0)) #("recover" 0 7 (ivy-index 0)) #("^conf" 0 5 (ivy-index 0)) #("surr" 0 4 (ivy-index 3)) #("surrou" 0 6 (ivy-index 3)) #("stash" 0 5 (ivy-index 11)) #("keys" 0 4 (ivy-index 0)) #("surround" 0 8 (ivy-index 4)) #("^un d tree" 0 10 (ivy-index 3)) #("^un tree" 0 8 (ivy-index 0))))
(setq ivy-history '(#("ini" 0 3 (ivy-index 0)) #("init" 0 4 (ivy-index 1)) "init.el" "/home/matt/.dots/emacs/.emacs.d/init.el" "init.el" "/home/matt/.dots/emacs/.emacs.d/init.el" #("gen" 0 3 (ivy-index 2)) #("gener" 0 5 (ivy-index 0)) #("evil ma" 0 7 (ivy-index 0)) "evil-maps.el" "ce" "evil-maps.el" #("evil maps" 0 9 (ivy-index 0)) "* elmacro - last-macro *" #("evil map" 0 8 (ivy-index 1)) #("load" 0 4 (ivy-index 0)) "~/dev/conductor+tempo/conductor/" "conductor/conductor_main.py" #("cond" 0 4 (ivy-index 0)) #("zsh" 0 3 (ivy-index 0)) #("org" 0 3 (ivy-index 0)) #("main" 0 4 (ivy-index 0)) "gruvbox-dark-medium" "meetings/2017-04-24-arni.org" #("or" 0 2 (ivy-index 0)) "counsel-projectile-find-file" "gruvbox-light-medium" "conductor/conductor_main.py" #("kubernete gen" 0 13 (ivy-index 1)) #("__init" 0 6 (ivy-index 16)) #("doll" 0 4 (ivy-index 0)) #("muzz" 0 4 (ivy-index 0)) #("loader" 0 6 (ivy-index 0)) #("parser" 0 6 (ivy-index 0)) #("docker" 0 6 (ivy-index 0)) "managers/tempo_conf.py" "gruvbox-dark-medium" "gruvbox-dark-soft" "gruvbox-dark-medium" "gruvbox-light-medium" "gruvbox-light-soft" "gruvbox-light-hard" "gruvbox-light-soft" "gruvbox-light-medium" #("pars" 0 4 (ivy-index 0)) "local_world.yaml" "local_world.yaml" #("pro" 0 3 (ivy-index 0)) #("lo" 0 2 (ivy-index 0)) #("locl" 0 4 (ivy-index 0)) #("mini" 0 4 (ivy-index 0)) #("empty" 0 5 (ivy-index 1)) #("cont" 0 4 (ivy-index 0)) "jira-deployment.yaml" #("tem" 0 3 (ivy-index 0)) #("jira" 0 4 (ivy-index 0)) "realease/confluence/service.py" #("dol" 0 3 (ivy-index 0)) #("tempo" 0 5 (ivy-index 0)) #("temp" 0 4 (ivy-index 1)) #("gen conf" 0 8 (ivy-index 0)) "conductor.org" "README.md" #("con" 0 3 (ivy-index 1)) "conductor/conductor_main.py" #("kub" 0 3 (ivy-index 1)) #("contain" 0 7 (ivy-index 0)) "empty_dir.py" "communication_plan.org" #("gen co" 0 6 (ivy-index 0)) "empty_dir.py" "empty_dir.py" "local_world.yaml" "~/dev/conductor+tempo/tempo_conductor/" "empty_dir.py" "managers/dashboar_configurator.py" "~/dev/conductor+tempo/tempo_conductor/" #("varfil" 0 6 (ivy-index 0)) "~/dev/conductor+tempo/conductor/" "~/dev/conductor+tempo/conductor/" "sidecars.py" "sidecars.py" "gen_config.py" "minikube.py" #("container" 0 9 (ivy-index 0)) #(" ain" 0 4 (ivy-index 0)) #("local" 0 5 (ivy-index 1)) "gen_config.py" #("kuber" 0 5 (ivy-index 0)) "managers/tempo_conf.py" #("condu" 0 5 (ivy-index 0)) "conductor/conductor_main.py" "LICENSE" "tht" "this" "local_world.yaml" #("that" 0 4 (ivy-index 0)) #("th" 0 2 (ivy-index 0)) #("thi" 0 3 (ivy-index 0))))
(setq evil-jumps-history 'nil)
